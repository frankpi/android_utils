package com.hongbao.utility;

import android.app.ActivityManager;
import android.bluetooth.BluetoothAdapter;
import android.content.ComponentName;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Environment;
import android.provider.Settings;
import android.provider.Settings.System;
import android.telephony.TelephonyManager;
import android.util.TypedValue;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

public class SystemInfo {

    @SuppressWarnings("deprecation")
    public static String getGlobalDeviceId(final Context appContext) {
        String number = null;
        try {
            TelephonyManager tm = (TelephonyManager) appContext.getSystemService(Context.TELEPHONY_SERVICE);
            number = tm.getDeviceId();
        } catch (Exception e) {
        }

        if (number == null || number.length() == 0) {
            try {
                number = System.getString(appContext.getContentResolver(), System.ANDROID_ID);
            } catch (Exception e) {
            }
        }

        if ((number == null || number.length() == 0) && Build.VERSION.SDK_INT > Build.VERSION_CODES.FROYO) {
            try {
                Class<Build> cls = Build.class;
                Field field = cls.getDeclaredField("SERIAL");
                field.setAccessible(true);
                number = (String) field.get(null);
            } catch (Exception e) {
            }
        }

        if (number == null | number.length() == 0)
            return "UNKNOWN";
        else
            return number;
    }

    public static String getAndroidId(Context context) {
        String androidId = "0";
        try {
            androidId = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return androidId;
    }

    public static String getNetworkType(final Context appContext, TelephonyManager telephonyManager) {
        WifiManager wifiManager = (WifiManager) appContext.getSystemService(Context.WIFI_SERVICE);

        // this will only work for apps which already have wifi permissions.
        try {
            if (wifiManager.isWifiEnabled()) {
                return "wifi";
            }
        } catch (Exception e) {
        }

        switch (telephonyManager.getNetworkType()) {
            case TelephonyManager.NETWORK_TYPE_EDGE:
                return "edge";
            case TelephonyManager.NETWORK_TYPE_GPRS:
                return "GPRS";
            case TelephonyManager.NETWORK_TYPE_UMTS:
                return "UMTS";
            case TelephonyManager.NETWORK_TYPE_UNKNOWN:
                return "unknown";
        }
        return "none";
    }

    public static int convertVersion(String version) {
        int ver = 0;
        if ("unknown".equals(version))
            return ver;
        String[] vers = version.split("\\.");
        if (vers.length == 3) {
            if (vers[0].length() < 4 && vers[1].length() < 3 && vers[2].length() < 5)
                ver = (1000000 * Integer.parseInt(vers[0])) + (10000 * Integer.parseInt(vers[1])) + Integer.parseInt(vers[2]);
        }
        return ver;
    }

    public static String getLiteralVersion(String version) {
        try {
            int ver = Integer.parseInt(version);
            int major = ver / 1000000, minor = (ver - major * 1000000) / 10000, build = ver % 10000;
            return String.format("%1$s.%2$s.%3$s", major, minor, build);
        } catch (Exception e) {
            return "";
        }
    }

    public static boolean newerThanCurrentVersion(String server, String local) {
        try {
            int currentVersion = SystemInfo.convertVersion(local);
            int serverVersion = Integer.parseInt(server);
            // Log.w("newerThanCurrentVersion", ""+ currentVersion + " --> " +
            // serverVersion );
            return serverVersion > currentVersion;
        } catch (Exception e) {
            return false;
        }
    }

    public static boolean newerThanDatatimeVersion(String newVersion, String oldVersion) {
        String curver[] = oldVersion.trim().split("\\.");
        String newver[] = newVersion.trim().split("\\.");
        if (curver.length != 2) {
            return true;
        } else if (newver.length != 2) {
            return false;
        }
        try {
            SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd");
            Date curDate = df.parse(curver[0]);
            Date newDate = df.parse(newver[0]);
            if (newDate.equals(curDate)) {
                int r = newver[1].compareToIgnoreCase(curver[1]);
                return r > 0;
            }
            return newDate.after(curDate);
        } catch (Exception e) {
            return false;
        }
    }

    public static boolean checkConnectivity(Context context) {
        ConnectivityManager manager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        if (manager == null) {
            return false;
        }
        NetworkInfo networkinfo = manager.getActiveNetworkInfo();
        return networkinfo != null && networkinfo.isConnectedOrConnecting();
    }

    public static boolean isWapNetwork(Context context) {
        try {
            ConnectivityManager connMgr = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
            NetworkInfo info = connMgr.getActiveNetworkInfo();
            if (info.getType() == ConnectivityManager.TYPE_WIFI || info.getType() == 9) {
                return false;
            }
            String currentAPN = info.getExtraInfo();
            if (currentAPN == null)
                return false;
            return currentAPN.equalsIgnoreCase("cmwap") || currentAPN.equalsIgnoreCase("ctwap") || currentAPN.equalsIgnoreCase("3gwap") || currentAPN.equalsIgnoreCase("uniwap");
        } catch (Exception e) {
            return false;
        }
    }

    public static boolean isWifiNetwork(Context context) {
        try {
            ConnectivityManager connMgr = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
            NetworkInfo info = connMgr.getActiveNetworkInfo();
            if (info.getType() == ConnectivityManager.TYPE_WIFI) {
                return true;
            }
        } catch (Exception e) {
        }
        return false;
    }

    public static boolean isMobileNetwork(Context context) {
        try {
            ConnectivityManager connMgr = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
            NetworkInfo info = connMgr.getActiveNetworkInfo();
            if (info.getType() == ConnectivityManager.TYPE_MOBILE) {
                return true;
            }
        } catch (Exception e) {
        }
        return false;
    }

    public static boolean isMobileNetworkConnecting(Context context) {
        try {
            ConnectivityManager connMgr = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
            return connMgr.getNetworkInfo(ConnectivityManager.TYPE_MOBILE).isConnectedOrConnecting();
        } catch (Exception e) {
        }
        return false;
    }

    public static float dip2px(Context context, float dip) {
        Resources r = context.getResources();
        float px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dip, r.getDisplayMetrics());
        return px;
    }

    public static float sp2px(Context context, float sp) {
        Resources r = context.getResources();
        float px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, sp, r.getDisplayMetrics());
        return px;
    }

    public static float px2sp(Context context, float pxValue) {
        float scale = context.getResources().getDisplayMetrics().scaledDensity;
        return (pxValue / scale + 0.5f);
    }

    public static CharSequence getLabel(Context context, String packageName, String className, String defaultValue) {
        try {
            final PackageManager pm = context.getPackageManager();
            CharSequence label = null;
            ComponentName componentName = new ComponentName(packageName, className);
            label = pm.getActivityInfo(componentName, 0).loadLabel(pm);
            if (label == null) {
                label = packageName;
            }
            return label;
        } catch (Exception e) {
        }
        return defaultValue;
    }

    private static final String KEY_MIUI_VERSION_CODE = "ro.miui.ui.version.code";
    private static final String KEY_MIUI_VERSION_NAME = "ro.miui.ui.version.name";
    private static final String KEY_MIUI_INTERNAL_STORAGE = "ro.miui.internal.storage";

    public static boolean isMIUI() {
        try {
            final BuildProperties prop = BuildProperties.newInstance();
            return prop.getProperty(KEY_MIUI_VERSION_CODE, null) != null || prop.getProperty(KEY_MIUI_VERSION_NAME, null) != null || prop.getProperty(KEY_MIUI_INTERNAL_STORAGE, null) != null;
        } catch (final IOException e) {
            return false;
        }
    }

    private static Method mReadProcLines;

    public static final void readProcLines(String path, String[] reqFields, long[] outSize) {
        if (mReadProcLines == null) {
            try {
                Class<android.os.Process> cls = android.os.Process.class;
                mReadProcLines = cls.getDeclaredMethod("readProcLines", String.class, String[].class, long[].class);
            } catch (Exception e) {
            }
        }
        try {
            mReadProcLines.invoke(null, path, reqFields, outSize);
        } catch (Exception e) {
        }
    }

    public static final int getParentPid(int pid) {
        String[] procStatusLabels = {"PPid:"};
        long[] procStatusValues = new long[1];
        procStatusValues[0] = -1;
        readProcLines("/proc/" + pid + "/status", procStatusLabels, procStatusValues);
        return (int) procStatusValues[0];
    }

    public static final int getUidForPid(int pid) {
        String[] procStatusLabels = {"Uid:"};
        long[] procStatusValues = new long[1];
        procStatusValues[0] = -1;
        readProcLines("/proc/" + pid + "/status", procStatusLabels, procStatusValues);
        return (int) procStatusValues[0];
    }

    public static String getPidCmdline(int pid) {
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(String.format("/proc/%1$s/cmdline", pid)));
            return br.readLine().trim();
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        } finally {
            try {
                br.close();
            } catch (Exception e) {
            }
        }
        return getCommandLineOutput(String.format("cat /proc/%1$s/cmdline", pid)).trim();
    }

    private static String getCommandLineOutput(String cmdLine) {
        String output = "";
        try {
            Process p = Runtime.getRuntime().exec(cmdLine);
            BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line;
            while ((line = input.readLine()) != null) {
                output += (line + '\n');
            }
            input.close();
        } catch (Exception e) {
        }
        return output;
    }

    public static String getCurrentCountryString(Context context) {
        return context.getResources().getConfiguration().locale.getDisplayCountry();
    }

    public static int getStatusBarHeight(Context context) {
        Class<?> c = null;
        Object obj = null;
        Field field = null;
        int x = 0, statusBarHeight = 0;
        try {
            c = Class.forName("com.android.internal.R$dimen");
            obj = c.newInstance();
            field = c.getField("status_bar_height");
            x = Integer.parseInt(field.get(obj).toString());
            statusBarHeight = context.getResources().getDimensionPixelSize(x);
        } catch (Exception e1) {
            e1.printStackTrace();
        }
        return statusBarHeight;
    }

    public static String getWifiMacAddress(Context context) {
        try {
            WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
            WifiInfo wifiInfo = wifiManager.getConnectionInfo();
            if (wifiInfo != null) {
                return wifiInfo.getMacAddress();
            }
        } catch (Exception ignore) {
        }
        BluetoothAdapter bAdapt = BluetoothAdapter.getDefaultAdapter();
        if (bAdapt != null) {
            return bAdapt.getAddress();
        }
        return "";
    }

    public static class BuildProperties {

        private final Properties properties;

        private BuildProperties() throws IOException {
            properties = new Properties();
            properties.load(new FileInputStream(new File(Environment.getRootDirectory(), "build.prop")));
        }

        public boolean containsKey(final Object key) {
            return properties.containsKey(key);
        }

        public boolean containsValue(final Object value) {
            return properties.containsValue(value);
        }

        public Set<Map.Entry<Object, Object>> entrySet() {
            return properties.entrySet();
        }

        public String getProperty(final String name) {
            return properties.getProperty(name);
        }

        public String getProperty(final String name, final String defaultValue) {
            return properties.getProperty(name, defaultValue);
        }

        public boolean isEmpty() {
            return properties.isEmpty();
        }

        public Enumeration<Object> keys() {
            return properties.keys();
        }

        public Set<Object> keySet() {
            return properties.keySet();
        }

        public int size() {
            return properties.size();
        }

        public Collection<Object> values() {
            return properties.values();
        }

        public static BuildProperties newInstance() throws IOException {
            return new BuildProperties();
        }

    }

    public static String getUIPName(Context context) {
        int pid = android.os.Process.myPid();
        ActivityManager mActivityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
        for (ActivityManager.RunningAppProcessInfo appProcess : mActivityManager.getRunningAppProcesses()) {
            if (appProcess.pid == pid) {
                return appProcess.processName;
            }
        }
        return "";
    }
    
    public static void apk(String apkUrl) {
        int length;
        ZipFile zipFile;
        try {
            zipFile = new ZipFile(new File(apkUrl));
            Enumeration enumeration = zipFile.entries();
            ZipEntry zipEntry = zipFile.getEntry(("AndroidManifest.xml"));
                AXmlResourceParser parser = new AXmlResourceParser();
                parser.open(zipFile.getInputStream(zipEntry));
                boolean flag = true;
                while (flag) {
                    int type = parser.next();
                    if (type == XmlPullParser.START_TAG) {
                        int count = parser.getAttributeCount();
                        for (int i = 0; i < count; i++) {
                            String name = parser.getAttributeName(i);
                            String value = parser.getAttributeValue(i);
                            if (value.contains("MAIN")) {
                                System.out.println(name + "-----------" + value);
                                flag = false;
                                break;
                            }else if("package".equals(name)){
                                System.out.println(name+"***"+value);
                             }else{
                                 System.out.println(name+"   "+value); 
                             }
                        }//end for
                    }
                }// end while       
        } catch (Exception e) {
        }
    }

}
